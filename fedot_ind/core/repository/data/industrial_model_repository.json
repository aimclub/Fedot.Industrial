{
  "metadata": {
    "custom_class": {
      "accepted_node_types": [
        "any"
      ],
      "description": "Implementations of the custom classification models",
      "forbidden_node_types": "[]",
      "input_type": "[DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_preprocessing_strategy",
        "IndustrialClassificationPreprocessingStrategy"
      ],
      "tags": [
        "ml",
        "custom"
      ],
      "tasks": "[TaskTypesEnum.classification]"
    },
    "custom_regr": {
      "accepted_node_types": [
        "any"
      ],
      "description": "Implementations of the custom regression models",
      "forbidden_node_types": "[]",
      "input_type": "[DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "IndustrialCustomRegressionStrategy"
      ],
      "tags": [
        "ml",
        "custom"
      ],
      "tasks": "[TaskTypesEnum.regression]"
    },
    "sklearn_class": {
      "accepted_node_types": [
        "any"
      ],
      "description": "Implementations of the classification models from scikit-learn framework",
      "forbidden_node_types": "[]",
      "input_type": "[DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "IndustrialSkLearnClassificationStrategy"
      ],
      "tags": [
        "ml",
        "sklearn"
      ],
      "tasks": "[TaskTypesEnum.classification]"
    },
    "sklearn_clust": {
      "accepted_node_types": [
        "any"
      ],
      "description": "Implementations of the clustering models from scikit-learn framework",
      "forbidden_node_types": "[]",
      "input_type": "[DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "strategies": [
        "fedot.core.operations.evaluation.clustering",
        "SkLearnClusteringStrategy"
      ],
      "tags": [
        "ml",
        "sklearn"
      ],
      "tasks": "[TaskTypesEnum.clustering]"
    },
    "sklearn_regr": {
      "accepted_node_types": [
        "any"
      ],
      "description": "Implementations of the regression models from scikit-learn framework",
      "forbidden_node_types": "[]",
      "input_type": "[DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "IndustrialSkLearnRegressionStrategy"
      ],
      "tags": [
        "ml",
        "sklearn",
        "composition"
      ],
      "tasks": "[TaskTypesEnum.regression, TaskTypesEnum.ts_forecasting]"
    },
    "ts_model": {
      "description": "Implementations of the time series models",
      "input_type": "[DataTypesEnum.ts]",
      "output_type": "[DataTypesEnum.table]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "IndustrialSkLearnForecastingStrategy"
      ],
      "tags": [
        "time_series"
      ],
      "tasks": "[TaskTypesEnum.ts_forecasting]"
    },
    "custom_model": {
      "description": "Implementations of the models specified by user with external code source",
      "input_type": "[DataTypesEnum.ts, DataTypesEnum.table, DataTypesEnum.text]",
      "output_type": "[DataTypesEnum.table]",
      "strategies": [
        "fedot.core.operations.evaluation.custom",
        "CustomModelStrategy"
      ],
      "tags": [
        "non-default"
      ],
      "tasks": "[TaskTypesEnum.regression, TaskTypesEnum.ts_forecasting, TaskTypesEnum.classification, TaskTypesEnum.clustering]"
    },
    "industrial_decomposition_for_forecasting": {
      "tasks": "[TaskTypesEnum.ts_forecasting]",
      "input_type": "[DataTypesEnum.ts]",
      "output_type": "[DataTypesEnum.table]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_decomposition_for_forecasting_strategy",
        "IndustrialDecompositionForForecastingStrategy"
      ],
      "tags": [
      ],
      "description": "Implementations of industrial operations for decomposition of time series for forecasting it's parts"
    },
    "fedot_automl_classification": {
      "tasks": "[TaskTypesEnum.classification]",
      "input_type": "[DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.fedot_automl_evaluation_strategy",
        "FedotAutoMLClassificationStrategy"
      ],
      "tags": [
      ],
      "description": "Implementations of fedot automl classification strategy"
    },
    "fedot_automl_forecasting": {
      "tasks": "[TaskTypesEnum.ts_forecasting]",
      "input_type": "[DataTypesEnum.ts]",
      "output_type": "[DataTypesEnum.ts]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.fedot_automl_evaluation_strategy",
        "FedotAutoMLForecastingStrategy"
      ],
      "tags": [],
      "description": "Implementations of fedot automl forecasting strategy"
    },
    "fedot_NN_classification": {
      "tasks": "[TaskTypesEnum.classification, TaskTypesEnum.regression]",
      "input_type": "[DataTypesEnum.image, DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table, DataTypesEnum.image]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "FedotNNClassificationStrategy"
      ],
      "tags": [
      ],
      "description": "Implementations of fedot NN classification strategy"
    },
    "fedot_anomaly_detection": {
      "tasks": "[TaskTypesEnum.ts_forecasting, TaskTypesEnum.classification]",
      "input_type": "[DataTypesEnum.ts, DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table, DataTypesEnum.image]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "IndustrialAnomalyDetectionStrategy"
      ],
      "tags": [
      ],
      "description": "Implementations of fedot anomaly_detection strategy"
    },
    "fedot_NN_regression": {
      "tasks": "[TaskTypesEnum.regression]",
      "input_type": "[DataTypesEnum.image, DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table, DataTypesEnum.image]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "FedotNNRegressionStrategy"
      ],
      "tags": [
      ],
      "description": "Implementations of fedot NN regression strategy"
    },
    "fedot_NN_forecasting": {
      "tasks": "[TaskTypesEnum.ts_forecasting]",
      "input_type": "[DataTypesEnum.ts, DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.industrial_model_strategy",
        "FedotNNTimeSeriesStrategy"
      ],
      "tags": [
        "time_series"
      ],
      "description": "Implementations of fedot NN forecasting strategy"
    },
    "fedot_automl_regression": {
      "tasks": "[TaskTypesEnum.regression]",
      "input_type": "[DataTypesEnum.table]",
      "output_type": "[DataTypesEnum.table]",
      "accepted_node_types": [
        "any"
      ],
      "forbidden_node_types": "[]",
      "strategies": [
        "fedot_ind.core.operation.interfaces.fedot_automl_evaluation_strategy",
        "FedotAutoMLRegressionStrategy"
      ],
      "tags": [
      ],
      "description": "Implementations of fedot automl regression strategy"
    }
  },

  "operations": {
     "ssa_forecaster": {
      "meta": "ts_model",
      "presets": ["best_quality", "ts"],
      "tags": [
        "decomposition"
      ]
    },
     "fedot_cls": {
      "meta": "fedot_automl_classification",
      "presets": [
        "auto"
      ],
      "tags": [
        "automl"
      ]
     },
    "fedot_regr": {
      "meta": "fedot_automl_regression",
      "presets": [
        "auto"
      ],
      "tags": [
        "automl"
      ]
    },
    "fedot_forecast": {
      "meta": "fedot_automl_forecasting",
      "presets": [
        "auto"
      ],
      "tags": [
        "automl"
      ]
    },
    "inception_model": {
      "meta": "fedot_NN_classification",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "omniscale_model": {
      "meta": "fedot_NN_classification",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "tst_model": {
      "meta": "fedot_NN_classification",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "sst": {
      "meta": "fedot_anomaly_detection",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "stat_detector": {
      "meta": "fedot_anomaly_detection",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "arima_detector": {
      "meta": "fedot_anomaly_detection",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "iforest_detector": {
      "meta": "fedot_anomaly_detection",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "conv_ae_detector": {
      "meta": "fedot_anomaly_detection",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "lstm_ae_detector": {
      "meta": "fedot_anomaly_detection",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "lora_model": {
      "meta": "fedot_NN_classification",
      "presets": [
        "best_quality"
      ],
      "tags": [
      ]
    },
    "resnet_model": {
      "meta": "fedot_NN_classification",
      "presets": [
        "best_quality"
      ],
      "tags": [
        "automl"
      ]
    },
    "xcm_model": {
      "meta": "fedot_NN_classification",
      "presets": [
        "best_quality"
      ],
      "tags": [
        "automl"
      ]
    },
    "patch_tst_model": {
      "meta": "fedot_NN_forecasting",
      "presets": ["fast_train", "best_quality", "ts"],
      "tags": [
        "deep", "ts_model"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "tcn_model": {
      "meta": "fedot_NN_forecasting",
      "presets": [
        "fast_train",
        "best_quality",
        "ts"
      ],
      "tags": [
        "deep",
        "ts_model"
      ],
      "input_type": "[DataTypesEnum.ts]"
    },
    "deepar_model": {
      "meta": "fedot_NN_forecasting",
      "presets": [
        "ts"
      ],
      "tags": [],
      "input_type": "[DataTypesEnum.ts]"
    },
    "eigen_forecaster": {
      "meta": "ts_model",
      "presets": [
        "ts"
      ],
      "tags": [],
      "input_type": "[DataTypesEnum.ts]"
    },
    "topo_forecaster": {
      "meta": "ts_model",
      "presets": [
        "ts"
      ],
      "tags": [],
      "input_type": "[DataTypesEnum.ts]"
    },
    "lagged_forecaster": {
      "meta": "ts_model",
      "presets": [
        "ts"
      ],
      "tags": [],
      "input_type": "[DataTypesEnum.ts]"
    },
    "adareg": {
      "meta": "sklearn_regr",
      "presets": [
        "fast_train",
        "ts",
        "*tree"
      ],
      "tags": [
        "boosting",
        "non_multi",
        "non_linear"
      ]
    },
    "ar": {
      "meta": "ts_model",
      "presets": ["fast_train", "ts"],
      "tags": [
        "simple",
        "interpretable",
        "non_lagged",
        "linear"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "arima": {
      "meta": "ts_model",
      "presets": ["ts"],
      "tags": [
        "simple",
        "interpretable",
        "non_lagged",
        "linear",
        "new_data_refit",
        "non-default"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "cgru": {
      "meta": "ts_model",
      "presets": ["ts"],
      "tags": [
        "non_linear"
      ]
    },
    "bernb": {
      "meta": "sklearn_class",
      "presets": ["fast_train"],
      "tags": [
        "simple",
        "bayesian",
        "non_multi",
        "linear"
      ]
    },
    "catboost": {
      "meta": "sklearn_class",
      "presets": ["*tree"],
      "tags": [
        "boosting", "non_linear"
      ]
    },
    "catboostreg": {
      "meta": "sklearn_regr",
      "presets": ["*tree"],
      "tags": [
        "boosting", "non_multi", "non_linear"
      ]
    },
    "dt": {
      "meta": "sklearn_class",
      "presets": ["fast_train", "*tree"],
      "tags": [
        "simple",
        "tree",
        "interpretable",
        "non_linear"
      ]
    },
    "dtreg": {
      "meta": "sklearn_regr",
      "presets": ["fast_train", "ts", "*tree"],
      "tags": [
        "tree",
        "interpretable",
        "non_linear"
      ]
    },
    "gbr": {
      "meta": "sklearn_regr",
      "presets": ["*tree"],
      "tags": [
        "boosting",
        "non_multi",
        "non_linear"
      ]
    },
    "kmeans": {
      "meta": "sklearn_clust",
      "presets": ["fast_train"],
      "tags": ["linear"]
    },
    "knn": {
      "meta": "sklearn_class",
      "presets": ["fast_train"],
      "tags": [
        "simple",
        "correct_params",
        "non_linear"
      ]
    },
    "knnreg": {
      "meta": "custom_regr",
      "presets": ["fast_train", "ts"],
      "tags": [
        "simple",
        "non_linear"
      ]
    },
    "lasso": {
      "meta": "sklearn_regr",
      "presets": ["fast_train", "ts"],
      "tags": [
        "simple",
        "linear",
        "interpretable"
      ]
    },
    "lda": {
      "meta": "custom_class",
      "presets": ["fast_train"],
      "tags": [
        "discriminant", "linear", "correct_params", "non-default"
      ]
    },
    "lgbm": {
      "meta": "sklearn_class",
      "tags": [
        "boosting", "tree", "non_linear"
      ]
    },
    "lgbmreg": {
      "meta": "sklearn_regr",
      "presets": ["*tree"],
      "tags": [
        "boosting", "tree", "non_multi", "non_linear"
      ]
    },
    "linear": {
      "meta": "sklearn_regr",
      "presets": ["fast_train", "ts"],
      "tags": [
        "simple",
        "linear",
        "interpretable"
      ]
    },
    "logit": {
      "meta": "sklearn_class",
      "presets": [
        "fast_train"
      ],
      "tags": [
        "simple",
        "linear",
        "interpretable",
        "non_multi"
      ]
    },
    "one_class_svm": {
      "meta": "sklearn_class",
      "presets": [
        "fast_train"
      ],
      "tags": [
        "simple",
        "linear",
        "interpretable",
        "non_multi"
      ]
    },
    "mlp": {
      "meta": "sklearn_class",
      "tags": [
        "neural",
        "non_linear"
      ]
    },
    "multinb": {
      "meta": "sklearn_class",
      "presets": ["fast_train"],
      "tags": [
        "non-default",
        "bayesian",
        "non_multi",
        "linear"
      ]
    },
    "nbeats_model": {
      "meta": "fedot_NN_forecasting",
      "presets": ["fast_train", "best_quality", "ts"],
      "tags": [
        "deep", "ts_model"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "qda": {
      "meta": "custom_class",
      "presets": ["fast_train"],
      "tags": [
        "discriminant",
        "quadratic",
        "non_linear"
      ]
    },
    "rf": {
      "meta": "sklearn_class",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "industrial_stat_clf": {
      "meta": "sklearn_class",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "industrial_freq_clf": {
      "meta": "sklearn_class",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "industrial_manifold_clf": {
      "meta": "sklearn_class",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "industrial_stat_reg": {
      "meta": "sklearn_regr",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "industrial_freq_reg": {
      "meta": "sklearn_regr",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "industrial_manifold_reg": {
      "meta": "sklearn_regr",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "pdl_clf": {
      "meta": "sklearn_class",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "rfr": {
      "meta": "sklearn_regr",
      "presets": [
        "fast_train",
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "ridge": {
      "meta": "sklearn_regr",
      "presets": [
        "fast_train",
        "ts"
      ],
      "tags": [
        "simple",
        "linear",
        "interpretable"
      ]
    },
    "polyfit": {
      "meta": "ts_model",
      "presets": ["fast_train", "ts"],
      "tags": [
        "simple",
        "non_lagged",
        "non_linear",
        "interpretable",
        "correct_params"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "sgdr": {
      "meta": "sklearn_regr",
      "presets": ["fast_train", "ts"],
      "tags": [
        "non_multi", "non_linear"
      ]
    },
    "stl_arima": {
      "meta": "ts_model",
      "presets": ["ts"],
      "tags": [
        "simple",
        "interpretable",
        "non_lagged",
        "linear",
        "new_data_refit",
        "non-default"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "glm": {
      "meta": "ts_model",
      "presets": ["fast_train", "ts"],
      "tags": [
        "simple",
        "interpretable",
        "non_lagged",
        "non_linear"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "ets": {
      "meta": "ts_model",
      "presets": [
        "fast_train",
        "ts"
      ],
      "tags": [
        "simple",
        "interpretable",
        "non_lagged",
        "non_linear"
      ],
      "input_type": "[DataTypesEnum.ts]"
    },
    "locf": {
      "meta": "ts_model",
      "presets": [
        "fast_train",
        "ts"
      ],
      "tags": [
        "non_linear",
        "simple",
        "interpretable",
        "non_lagged"
      ],
      "input_type": "[DataTypesEnum.ts]"
    },
    "ts_naive_average": {
      "meta": "ts_model",
      "presets": ["fast_train", "ts"],
      "tags": [
        "non_linear",
        "simple",
        "interpretable",
        "non_lagged"
      ],
	  "input_type": "[DataTypesEnum.ts]"
    },
    "svc": {
      "meta": "custom_class",
      "tags": [
        "no_prob",
        "expensive",
        "non_linear"
      ]
    },
    "svr": {
      "meta": "sklearn_regr",
      "tags": [
        "non_multi",
        "non_linear"
      ]
    },
    "treg": {
      "meta": "sklearn_regr",
      "presets": [
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "pdl_reg": {
      "meta": "sklearn_regr",
      "presets": [
        "*tree"
      ],
      "tags": [
        "tree",
        "non_linear"
      ]
    },
    "xgboost": {
      "meta": "sklearn_class",
      "presets": [
        "*tree"
      ],
      "tags": [
        "boosting",
        "tree",
        "non-default",
        "non_linear"
      ]
    },
    "xgbreg": {
      "meta": "sklearn_regr",
      "presets": ["*tree"],
      "tags": [
        "boosting", "tree", "non_multi", "non-default", "non_linear"
      ]
    },
    "cnn": {
      "meta": "custom_class",
      "tags": [
        "deep", "non-default", "non_linear"
      ],
      "input_type": "[DataTypesEnum.image]",
      "output_type": "[DataTypesEnum.table]"
    },
    "custom": {
		"meta": "custom_model",
		"tags": [
          "custom_model",
          "non-default"
        ]
	}
  }
}